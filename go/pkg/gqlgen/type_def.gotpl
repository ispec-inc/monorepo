package {{ .PackageName }}

import "github.com/graphql-go/graphql"

type {{ .Definition.Name }}TypeResolverRegistry interface {
    {{- range $field := .FieldDefinitionList }}
    {{- if .IsUserDefinedType }}
    {{ .UpperCamelName }}() func(params graphql.ResolveParams) (interface{}, error){{- end }}{{- end }}
}

func {{ .Definition.Name }}Type(r {{ .Definition.Name }}TypeResolverRegistry, tr TypeRegistry) *graphql.Object {
    return graphql.NewObject(
        graphql.ObjectConfig{
            Name: "{{ .Definition.Name }}",
            Fields: graphql.Fields{
                {{- range $field := .FieldDefinitionList }}
                {{- if .Definition }}
                "{{ .Definition.Name }}": &graphql.Field{
                    {{- if not .IsPrivate }}
                    Type: {{ .ExtractType }},
                    Description: "{{ .Definition.Description }}",
                    {{- if .IsUserDefinedType }}
                    Resolve: r.{{ .UpperCamelName }}(),
                    {{- end }}
                    {{- if .HasArgs }}
                    Args: graphql.FieldConfigArgument{
                    {{- range $arg := .Arguments }}
                        "{{ .Definition.Name }}": &graphql.ArgumentConfig{
                            {{- if not .IsPrivate }}
                            Type: {{ .ExtractType }},
                            Description: "{{ .Definition.Description }}",
                        },{{- end }}{{- end }}
                    },
                    {{- end }}{{- end }}
                },{{- end }}{{- end }}
            },
        },
    )
}
